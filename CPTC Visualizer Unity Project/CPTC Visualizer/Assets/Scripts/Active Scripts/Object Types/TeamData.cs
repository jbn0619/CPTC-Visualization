using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Author: Justin Neft
///     Ben Wetzel - Summer 2021
/// Function: Data container that is tied to a game object. Represents a competing team in the CPTC competition, and contains team-specific information as well as a copy of the infrastructure for them to modify.
/// </summary>
public class TeamData: MonoBehaviour
{
    #region Fields
    /// <summary>
    /// Id number of this team
    /// </summary>
    [SerializeField]
    protected int id;
    /// <summary>
    /// the name of this team displayed on the screen
    /// </summary>
    [SerializeField]
    protected string teamName;
    /// <summary>
    /// The color used to represent this team on the display
    /// </summary>
    [SerializeField]
    protected Color teamColor;
    /// <summary>
    /// A list of alerts the team has caused durning the competition
    /// </summary>
    [SerializeField]
    protected List<AlertData> alerts;
    /// <summary>
    /// A list of ip strings of the nodes this team is currently accessing
    /// </summary>
    [SerializeField]
    protected List<string> nodeIPs;
    /// <summary>
    /// This team's Infrastructure gameObject
    /// </summary>
    [SerializeField]
    protected GameObject infraObject;
    /// <summary>
    /// Reference to the Infra object's InfrastructureData
    /// </summary>
    [SerializeField]
    protected InfrastructureData infra;

    // Legacy Fields
    protected PriorityQueue queue;
    private List<UptimeChartData> uptimeCharts;
    private List<NotificationButton> notifMarkers;
    private List<GameObject> notifBanners;


    #endregion Fields

    #region Properties

    /// <summary>
    /// Gets or sets what this team's id is.
    /// </summary>
    public int ID
    {
        get
        {
            return id;
        }
        set
        {
            if (value >= 0)
            {
                id = value;
            }
        }
    }

    /// <summary>
    /// Returns a reference to the queue that should allow
    /// other classes to interact with the queue of the team
    /// </summary>
    public PriorityQueue Queue
    {
        get { return queue; }
    }

    /// <summary>
    /// Gets a list of alerts generated by this team.
    /// </summary>
    public List<AlertData> Alerts
    {
        get
        {
            return alerts;
        }
    }

    /// <summary>
    /// Gets and sets a list of ip strings for nodes this team is accessing.
    /// </summary>
    public List<string> NodeIPs
    {
        get
        {
            return nodeIPs;
        }
        set
        {
            nodeIPs = value;
        }
    }

    /// <summary>
    /// Gets or sets this team's copy of the infrastructure data.
    /// </summary>
    public InfrastructureData Infra
    {
        get
        {
            return infra;
        }
        set
        {
            infra = value;
        }
    }

    /// <summary>
    /// Gets a reference to this team's Infrastructure Object
    /// </summary>
    public GameObject InfraObject
    {
        get { return infraObject; }
    }

    /// <summary>
    /// Gets the Team Name
    /// </summary>
    public string TeamName
    {
        get { return teamName; }
        set { teamName = value; }
    }

    /// <summary>
    /// Gets the team's color
    /// </summary>
    public Color TeamColor
    {
        get { return teamColor; }
        set { teamColor = value; }
    }

    /// <summary>
    /// Gets a list of all the uptime charts in this team's infrastructure.
    /// </summary>
    public List<UptimeChartData> UptimeCharts
    {
        get
        {
            return uptimeCharts;
        }
    }

    /// <summary>
    /// Gets a list of all the notification markers active for this team.
    /// </summary>
    public List<NotificationButton> NotifMarkers
    {
        get
        {
            return notifMarkers;
        }
    }

    /// <summary>
    /// Gets a list of all the notification banners active for this team.
    /// </summary>
    public List<GameObject> NotifBanners
    {
        get
        {
            return notifBanners;
        }
    }

    #endregion Properties

    private void Awake()
    {
        uptimeCharts = new List<UptimeChartData>();
        notifBanners = new List<GameObject>();
        notifMarkers = new List<NotificationButton>();
        
    }

    // Start is called before the first frame update
    void Start()
    {
        
    }
    // Update is called once per frame
    void Update()
    {

    }
    /// <summary>
    /// Transfer data to the Team Component of a team's game object
    /// </summary>
    /// <param name="_id">Team's index in the Manager teams list</param>
    /// <param name="_name">Random name of the team</param>
    /// <param name="_color">Random color assigned to the team</param>
    /// <param name="_infraObject">Object Instance of the Team's Infrastructure topology</param>
    public void SetData(int _id, string _name, Color _color, GameObject _infraObject)
    {
        id = _id;
        teamName = _name;
        teamColor = _color;
        infraObject = _infraObject;
        infraObject.name = $"{_name}'s Infrastructure View";
        infra = infraObject.GetComponent<InfrastructureData>();
        alerts = new List<AlertData>();
        nodeIPs = new List<string>();
    }

    public void SetupQueue()
    {
        queue = new PriorityQueue();
    }

}
