using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

/// <summary>
/// Author: Ben Wetzel - Summer 2021
/// Function: Based on Justin's JsonClasses file from the Spring Semester, these data structures can be transferred between the Game Object 
///     scripts and the JSON file reader. The code is using them as an intermediary. 
///     
/// THIS VERSION IS FORMATTED TO TAKE DATA FROM THE LAFORGE TOPOLOGY JSON. TO LOAD DATA FROM THE TEST INFRASTRUCTURE, REVERT TO OLD (before June 15, 2021) VERSION OF THIS FILE
///     
/// NOTES 1: Because the classes in this file are not derived from MonoBehaviour (They can’t be attached to GameObjects as components), they can 
///     be easily understood by .NET CORE’s JSON Utility class. It would be preferable to use a more in-depth JSON library later, though I have 
///     had difficulty locating one for the framework (.NET CORE) Unity uses. Most JSON libraries available are developed for the .NET framework.
/// NOTES 2: In the future, it would be a good idea to implement a JSON Library which can read the key/value pairs from the JSON. This would 
///     make these classes redundant, as we would be able to set the variables directly to the MonoBehaviours rather than relying on the JSON 
///     utility to be able to understand which variables our holder classes need. 
/// </summary>
namespace Assets.Scripts
{
    /// <summary>
    /// An alert's data, namely what type of alert they are.
    /// </summary>
    [Serializable]
    public class Alert
    {
        /// <summary>
        /// String representation of the type of alert this is
        /// </summary>
        public string type;
        /// <summary>
        /// IP address of the node where the alert is triggered
        /// </summary>
        public string nodeIP;
        /// <summary>
        /// ID of the team triggering this alert
        /// </summary>
        public int teamID;
        /// <summary>
        /// Time the alert was logged by the system
        /// </summary>
        public string timeStamp;

        /// <summary>
        /// Constructor for the Alert class.
        /// </summary>
        /// <param name="_type">This alert's type.</param>
        /// <param name="_ip">IP address of the node</param>
        /// <param name="_teamID">ID number of the team triggering the alert</param>
        /// <param name="_time">The time the alert was triggered</param>
        public Alert(string _type, string _ip, int _teamID, string _time)
        {
            type = _type;
            nodeIP = _ip;
            teamID = _teamID;
            timeStamp = _time;
        }
    }

    /// <summary>
    /// A collection of a team's data, including ID, alerts they've generated and nodes they've discovered.
    /// </summary>
    [Serializable]
    public class Team
    {
        /// <summary>
        /// The id number assigned to this team
        /// </summary>
        public int id;
        /// <summary>
        /// the alerts this team has triggered
        /// </summary>
        public List<Alert> alerts;

        /// <summary>
        /// Constructor for the Team class.
        /// </summary>
        /// <param name="_id">This team's id number</param>
        /// <param name="_alerts">The alerts generated by this team.</param>
        public Team(int _id, List<Alert> _alerts)
        {
            id = _id;
            alerts = _alerts;
        }
    }

    /// <summary>
    /// A holder class to create an object storing data in the same structure as the provided JSON
    /// </summary>
    [Serializable]
    public class HostContainer
    {
        /// <summary>
        /// This is the name of the Host System
        /// </summary>
        public string hostname;
        /// <summary>
        /// This is a short description of the function of this system
        /// </summary>
        public string description;
        /// <summary>
        /// This is the operating system or base level of this system
        /// </summary>
        public string OS;

        /// <summary>
        /// Constructor for the Provisioned Host to Host communication
        /// </summary>
        /// <param name="_hostname">the string name of the Host System</param>
        /// <param name="_description">A string description of the function of the Host SYstem</param>
        /// <param name="_os">The string description of the Host's Operating System</param>
        public HostContainer(string _hostname, string _description, string _os)
        {
            this.hostname = _hostname;
            this.description = _description;
            this.OS = _os;
        }
    }
    
    /// <summary>
    /// A holder class for live data passed by the Laforge JSON
    /// </summary>
    [Serializable]
    public class AgentContainer
    {
        // No references for values yet. I'll need to ask bradley harker for what those'll look like. -Ben
        public string clientId;
        public string hostname;
        public int upTime;
        public int bootTime;
        public AgentContainer(string _clientID, string _hostName, int _upTime, int _bootTime)
        {
            clientId = _clientID;
            hostname = _hostName;
            upTime = _upTime;
            bootTime = _bootTime;
        }
        /// <summary>
        /// Empty to allow for null references until example values are retrieved.
        /// </summary>
        public AgentContainer()
        {

        }
    }

    /// <summary>
    /// A holder class for the Node level of information provided by the Laforge Topology. Short for Provisioned Host.
    /// </summary>
    [Serializable]
    public class ProHost
    {
        /// <summary>
        /// IP address of this node within a simulated server
        /// </summary>
        public string subnet_ip;
        /// <summary>
        /// This object stores the basic info about this node such as its name, use, and operating system
        /// </summary>
        public HostContainer ProvisionedHostToHost;
        /// <summary>
        /// Represents the active stream of data from the live server. 
        /// </summary>
        public AgentContainer ProvisionalHostToAgentState;

        /// <summary>
        /// Constructor for Node-Level information
        /// </summary>
        /// <param name="_ip">IP address of this Host within the network</param>
        /// <param name="_host">Information object containing data about the Host</param>
        /// <param name="_agent">Information Object containing Live data from Laforge.</param>
        public ProHost(string _ip, HostContainer _host, AgentContainer _agent = null)
        {
            subnet_ip = _ip;
            ProvisionedHostToHost = _host;
            ProvisionalHostToAgentState = _agent;
        }
    }

    /// <summary>
    /// A container for data passed within the Provisioned Network
    /// </summary>
    [Serializable]
    public class SubNetworkContainer
    {
        /// <summary>
        /// Is the network connected to the team's starting network? True = yes, False = no
        /// </summary>
        public bool vdi_visible;

        /// <summary>
        /// Constructor for Info object specific to Network layer
        /// </summary>
        /// <param name="_vdi"></param>
        public SubNetworkContainer(bool _vdi)
        {
            vdi_visible = _vdi;
        }
    }


    /// <summary>
    /// A holder class for the Network level information of the Laforge Topology. Short for Provisioned Network
    /// </summary>
    [Serializable]
    public class ProNetwork
    {
        /// <summary>
        /// name of this simulated network
        /// </summary>
        public string name;
        /// <summary>
        /// IP address of the Network 
        /// </summary>
        public string cidr;
        /// <summary>
        /// Represents communication between the Laforgenetwork and the actual network. Used to determine if this network has a direct connection to the team's network or blocked by firewalls.
        /// </summary>
        public SubNetworkContainer ProvisionedNetworkToNetwork;
        /// <summary>
        /// List of the system hosts (nodes) within this network
        /// </summary>
        public List<ProHost> ProvisionedNetworkToProvisionedHost;


        /// <summary>
        /// Constructor for Network data holder
        /// </summary>
        /// <param name="_name">Name of the Network</param>
        /// <param name="_ip">the IP address of this network</param>
        /// <param name="_subNet">Determines if the network is connected to the team's starting network or blocked by firewalls</param>
        /// <param name="_nodes">List of all systems (nodes) within this network</param>
        public ProNetwork(string _name, string _ip, SubNetworkContainer _subNet, List<ProHost> _nodes)
        {
            name = _name;
            cidr = _ip;
            ProvisionedNetworkToNetwork = _subNet;
            ProvisionedNetworkToProvisionedHost = _nodes;
        }
    }

    /// <summary>
    /// A holder class of The scope of the network for one team. The Laforge document passes an individual copy of the infrastructure for each team participating in the event.
    /// </summary>
    [Serializable]
    public class Infrastructure
    {
        /// <summary>
        /// The team this infrastructure belongs to.
        /// </summary>
        public int team_number;
        /// <summary>
        /// list of all networks within the simulated system
        /// </summary>
        public List<ProNetwork> TeamToProvisionedNetwork;

        /// <summary>
        /// Constructor for Infrastructure Data Holder
        /// </summary>
        /// <param name="_networks">List of Networks within this Competition </param>
        /// <param name="_teamID">This is the team number this network is attatched to in the Compettion structure</param>
        public Infrastructure (int _teamID,List<ProNetwork> _networks)
        {
            team_number = _teamID;
            TeamToProvisionedNetwork = _networks;
        }

    }

    // These are the exterior parts of the JSON file which we will need to read through in order to access the info we want.
    #region CPTC Laforge Shell Classes
    /// <summary>
    /// This is the highest level of object within the Laforge JSON document.
    /// </summary>
    [Serializable]
    public class LaforgeShell
    {
        /// <summary>
        /// The data structure beneath the outer layer of the JSON
        /// </summary>
        public DataShell data;
        /// <summary>
        /// Constructor for Outer JSON object
        /// </summary>
        /// <param name="_shell">The 2nd layer of the data structure</param>
        public LaforgeShell(DataShell _shell)
        {
            data = _shell;
        }

        public string ConvertToJSON()
        {
            string dataString = "";
            dataString += JsonUtility.ToJson(this);
            return dataString;
        }
    }
    /// <summary>
    /// This is just here because there's a data object containing all of the JSON's information.
    /// </summary>
    [Serializable]
    public class DataShell
    {
        /// <summary>
        /// the 3rd layer of the Laforge JSON Object
        /// </summary>
        public EnvironmentShell environment;
        /// <summary>
        /// Constructor for the 2rd layer of the Laforge JSON object
        /// </summary>
        /// <param name="_shell">The third layer of the Laforge JSON Object</param>
        public DataShell(EnvironmentShell _shell)
        {
            environment = _shell;
        }
    }
    /// <summary>
    /// Contains a list of system configurations to use when Laforge instantiates itself in the virtual simulation.
    /// </summary>
    [Serializable]
    public class EnvironmentShell
    {
        /// <summary>
        /// List of configurations for the Laforge Instantiation of the simulated system topology
        /// </summary>
        public List<BuildShell> EnvironmentToBuild;
        /// <summary>
        /// Constructor for the 3rd layer of the Laforge JSON Object
        /// </summary>
        /// <param name="_shell">The 4th layer of the Laforge JSON object</param>
        public EnvironmentShell(List<BuildShell> _shell)
        {
            EnvironmentToBuild = _shell;
        }
    }
    /// <summary>
    /// Contains a list of the Infrastructure copies for each team.
    /// </summary>
    [Serializable]
    public class BuildShell
    {
        /// <summary>
        /// List of Infrastructures Laforge built. Each is identical, except for the team_number assigned to it, and the order of the networks within it's list.
        /// </summary>
        public List<Infrastructure> buildToTeam;

        /// <summary>
        /// Constructor for the 4th Layer of the Laforge JSON Object
        /// </summary>
        /// <param name="_infras">List of Team copies of the System Topology for the competition</param>
        public BuildShell(List<Infrastructure> _infras)
        {
            buildToTeam = _infras;
        }
    }
    #endregion CPTP Laforge Shell Classes
    #region CPTC Splunk Shell Classes
    /// <summary>
    /// Data read from the JSON file sent by the splunk queries
    /// </summary>
    [Serializable]
    public class SplunkAlertsShell
    {
        /// <summary>
        /// List of new alerts detected by Splunk Queries within the last update cycle
        /// </summary>
        public List<Alert> alerts;

        /// <summary>
        /// List of new alerts to be processed
        /// </summary>
        /// <param name="_alerts"></param>
        public SplunkAlertsShell (List<Alert> _alerts)
        {
            alerts = _alerts;
        }

        public string ConvertToJSON()
        {
            string dataString = "";
            dataString += JsonUtility.ToJson(this);
            return dataString;
        }
    }
    #endregion CPTC Splunk Shell Classes
}
