using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

/// <summary>
/// Author: Ben Wetzel - Summer 2021
/// Function: Based on Justin's JsonClasses file from the Spring Semester, these data structures can be transferred between the Game Object 
///     scripts and the JSON file reader. The code is using them as an intermediary. 
/// NOTES 1: Because the classes in this file are not derived from MonoBehaviour (They can’t be attached to GameObjects as components), they can 
///     be easily understood by .NET CORE’s JSON Utility class. It would be preferable to use a more in-depth JSON library later, though I have 
///     had difficulty locating one for the framework (.NET CORE) Unity uses. Most JSON libraries available are developed for the .NET framework.
/// NOTES 2: In the future, it would be a good idea to implement a JSON Library which can read the key/value pairs from the JSON. This would 
///     make these classes redundant, as we would be able to set the variables directly to the MonoBehaviours rather than relying on the JSON 
///     utility to be able to understand which variables our holder classes need. 
/// </summary>
namespace Assets.Scripts
{
    /// <summary>
    /// An alert's data, namely what type of alert they are.
    /// </summary>
    [Serializable]
    public class Alert
    {
        /// <summary>
        /// String representation of the type of alert this is
        /// </summary>
        public string type;
        /// <summary>
        /// list of IDs for the nodes affected by this Alert
        /// </summary>
        public List<int> nodes;
        /// <summary>
        /// Weighted priority of the alert
        /// </summary>
        public int priority;
        /// <summary>
        /// Time the alert was logged by the system
        /// </summary>
        public int timestamp;

        /// <summary>
        /// Placeholder Constructor, because the AlertData class is not yet implemented
        /// </summary>
        public Alert()
        {

        }

        /// <summary>
        /// Constructor for the Alert class.
        /// </summary>
        /// <param name="_type">This alert's type.</param>
        /// <param name="_nodes">List of all ID numbers of affected Nodes</param>
        /// <param name="_priority">The value of the assigned priority of this alert</param>
        /// <param name="_time">The time the alert was triggered</param>
        public Alert(CPTCEvents _type, List<int> _nodes, int _priority, int _time)
        {
            type = _type.ToString();
            nodes = _nodes;
            priority = _priority;
            timestamp = _time;
        }
    }

    /// <summary>
    /// A collection of a team's data, including ID, alerts they've generated and nodes they've discovered.
    /// </summary>
    [Serializable]
    public class Team
    {
        /// <summary>
        /// The id number assigned to this team
        /// </summary>
        public int id;
        /// <summary>
        /// the alerts this team has triggered
        /// </summary>
        public List<Alert> alerts;
        /// <summary>
        /// the nodes that the team is currently accessing
        /// </summary>
        public List<int> nodes;

        /// <summary>
        /// Constructor for the Team class.
        /// </summary>
        /// <param name="_id">This team's id number</param>
        /// <param name="_alerts">The alerts generated by this team.</param>
        /// <param name="_nodes">The IDs of nodes that this team has found.</param>
        public Team(int _id, List<Alert> _alerts, List<int> _nodes)
        {
            id = _id;
            alerts = _alerts;
            nodes = _nodes;
        }
    }

    /// <summary>
    /// A collection of a node's data, including node id, node type and what nodes this one is connected to. 
    /// </summary>
    [Serializable]
    public class Node
    {
        /// <summary>
        /// ID number of this simulated node 
        /// </summary>
        public int id;
        /// <summary>
        /// IP address of this node within a simulated server
        /// </summary>
        public string ip;
        /// <summary>
        /// The type of simulated computer system this node is
        /// </summary>
        public string type;
        /// <summary>
        /// The current functionality of this node
        /// </summary>
        public string state;
        /// <summary>
        /// A list of ID numbers for adjacent Nodes
        /// </summary>
        public List<int> connections;
        /// <summary>
        /// A list of ID numbers for teams currently accessing this node
        /// </summary>
        public List<int> teamIDs;
        /// <summary>
        /// A boolean to track if this node is hidden in the system
        /// </summary>
        public bool isHidden;

        /// <summary>
        /// Constructor for the Node Data Holder
        /// </summary>
        /// <param name="_id">This Node's id number</param>
        /// <param name="_ip">This Node's IP address</param>
        /// <param name="_type">The system type of this node</param>
        /// <param name="_state">the current state of this node</param>
        /// <param name="_connections">list of id numbers of adjacent nodes</param>
        /// <param name="_teamIDs">List of the id numbers for the teams currently accessing this node</param>
        /// <param name="_isHidden">determines if the node is hidden in the network view</param>
        public Node(int _id, string _ip, NodeTypes _type, NodeState _state, List<int> _connections, List<int> _teamIDs, bool _isHidden = false)
        {
            id = _id;
            ip = _ip;
            type = _type.ToString();
            state = _state.ToString();
            connections = _connections;
            isHidden = _isHidden;
            teamIDs = _teamIDs;
        }
    }

    /// <summary>
    /// A collection of a network's data, including network id and nodes within it.
    /// </summary>
    [Serializable]
    public class SysNetwork
    {
        /// <summary>
        /// ID number of this simulated network
        /// </summary>
        public int networkId;
        /// <summary>
        /// List of ID numbers for the nodes within this network
        /// </summary>
        public List<int> nodeIDs;
        /// <summary>
        /// List of ID numbers for adjacent Networks
        /// </summary>
        public List<int> networkConnections;

        /// <summary>
        /// Constructor for Network data holder
        /// </summary>
        /// <param name="_id">ID number of the Network</param>
        /// <param name="_nodeIDs">List of all ID numbers of nodes within this network</param>
        /// <param name="_connections">list of ID numbers of adjacent simulated networks</param>
        public SysNetwork(int _id, List<int> _nodeIDs, List<int> _connections)
        {
            networkId = _id;
            nodeIDs = _nodeIDs;
            networkConnections = _connections;
        }
    }

    /// <summary>
    /// A collection of all network and node data compiled into one data structure.
    /// </summary>
    [Serializable]
    public class Infrastructure
    {
        /// <summary>
        /// list of all networks within the simulated system
        /// </summary>
        public List<SysNetwork> networks;
        /// <summary>
        /// list of all nodes within the simulated system
        /// </summary>
        public List<Node> nodes;
        /// <summary>
        /// list of all the teams within the simulated system
        /// </summary>
        public List<Team> teams;

        /// <summary>
        /// Constructor for Infrastructure Data Holder
        /// </summary>
        /// <param name="_networks">List of Networks within this Competition </param>
        /// <param name="_nodes">List of all nodes within this competition</param>
        /// <param name="_teams">List of all teams in the competition</param>
        public Infrastructure (List<SysNetwork> _networks, List<Node> _nodes, List<Team> _teams)
        {
            networks = _networks;
            nodes = _nodes;
            teams = _teams;
        }

        public string ConvertToJSON()
        {
            string dataString = "";
            dataString += JsonUtility.ToJson(this);
            return dataString;
        }
    }
}
