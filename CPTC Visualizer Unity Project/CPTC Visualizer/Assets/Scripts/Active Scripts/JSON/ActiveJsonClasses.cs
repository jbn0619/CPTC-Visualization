using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

/// <summary>
/// Author: Ben Wetzel - Summer 2021
/// Function: Based on Justin's JsonClasses file from the Spring Semester, these data structures can be transferred between the Game Object 
///     scripts and the JSON file reader. The code is using them as an intermediary. 
///     
///     THIS VERSION IS FORMATTED TO TAKE DATA FROM THE LAFORGE TOPOLOGY JSON. TO LOAD DATA FROM THE TEST INFRASTRUCTURE, REVERT TO OLD VERSION OF THIS FILE
///     
/// NOTES 1: Because the classes in this file are not derived from MonoBehaviour (They can’t be attached to GameObjects as components), they can 
///     be easily understood by .NET CORE’s JSON Utility class. It would be preferable to use a more in-depth JSON library later, though I have 
///     had difficulty locating one for the framework (.NET CORE) Unity uses. Most JSON libraries available are developed for the .NET framework.
/// NOTES 2: In the future, it would be a good idea to implement a JSON Library which can read the key/value pairs from the JSON. This would 
///     make these classes redundant, as we would be able to set the variables directly to the MonoBehaviours rather than relying on the JSON 
///     utility to be able to understand which variables our holder classes need. 
/// </summary>
namespace Assets.Scripts
{
    /// <summary>
    /// An alert's data, namely what type of alert they are.
    /// </summary>
    [Serializable]
    public class Alert
    {
        /// <summary>
        /// String representation of the type of alert this is
        /// </summary>
        public string type;
        /// <summary>
        /// list of IDs for the nodes affected by this Alert
        /// </summary>
        public List<int> nodes;
        /// <summary>
        /// Weighted priority of the alert
        /// </summary>
        public int priority;
        /// <summary>
        /// Time the alert was logged by the system
        /// </summary>
        public int timestamp;

        /// <summary>
        /// Placeholder Constructor, because the AlertData class is not yet implemented
        /// </summary>
        public Alert()
        {

        }

        /// <summary>
        /// Constructor for the Alert class.
        /// </summary>
        /// <param name="_type">This alert's type.</param>
        /// <param name="_nodes">List of all ID numbers of affected Nodes</param>
        /// <param name="_priority">The value of the assigned priority of this alert</param>
        /// <param name="_time">The time the alert was triggered</param>
        public Alert(CPTCEvents _type, List<int> _nodes, int _priority, int _time)
        {
            type = _type.ToString();
            nodes = _nodes;
            priority = _priority;
            timestamp = _time;
        }
    }

    /// <summary>
    /// A collection of a team's data, including ID, alerts they've generated and nodes they've discovered.
    /// </summary>
    [Serializable]
    public class Team
    {
        /// <summary>
        /// The id number assigned to this team
        /// </summary>
        public int id;
        /// <summary>
        /// the alerts this team has triggered
        /// </summary>
        public List<Alert> alerts;
        /// <summary>
        /// the nodes that the team is currently accessing
        /// </summary>
        public List<int> nodes;

        /// <summary>
        /// Constructor for the Team class.
        /// </summary>
        /// <param name="_id">This team's id number</param>
        /// <param name="_alerts">The alerts generated by this team.</param>
        /// <param name="_nodes">The IDs of nodes that this team has found.</param>
        public Team(int _id, List<Alert> _alerts, List<int> _nodes)
        {
            id = _id;
            alerts = _alerts;
            nodes = _nodes;
        }
    }

    /// <summary>
    /// A collection of a Host System's information
    /// </summary>
    [Serializable]
    public class HostContainer
    {
        /// <summary>
        /// This is the name of the Host System
        /// </summary>
        public string hostname;
        /// <summary>
        /// This is a short description of the function of this system
        /// </summary>
        public string description;
        /// <summary>
        /// This is the operating system or base level of this system
        /// </summary>
        public string OS;

        /// <summary>
        /// Constructor for the Provisioned Host to Host communication
        /// </summary>
        /// <param name="_hostname">the string name of the Host System</param>
        /// <param name="_description">A string description of the function of the Host SYstem</param>
        /// <param name="_os">The string description of the Host's Operating System</param>
        public HostContainer(string _hostname, string _description, string _os)
        {
            this.hostname = _hostname;
            this.description = _description;
            this.OS = _os;
        }
    }
    
    /// <summary>
    /// A collection of an Agent's passed information
    /// </summary>
    public class AgentContainer
    {
        // This is currently empty because we don't have an example of the agent's data format yet. - Ben
        public AgentContainer()
        {

        }
    }

    /// <summary>
    /// A collection of a node's data, including node id, node type and what nodes this one is connected to. 
    /// </summary>
    [Serializable]
    public class ProHost
    {
        /// <summary>
        /// IP address of this node within a simulated server
        /// </summary>
        public string subnet_ip;
        /// <summary>
        /// This object stores the basic info about this node such as its name, use, and operating system
        /// </summary>
        public HostContainer ProvisionedHostToHost;
        /// <summary>
        /// Represents the active stream of data from the live server. 
        /// </summary>
        public AgentContainer ProvisionalHostToAgentState;

        public ProHost(string _ip, HostContainer _host, AgentContainer _agent = null)
        {
            subnet_ip = _ip;
            ProvisionedHostToHost = _host;
            ProvisionalHostToAgentState = _agent;
        }
    }

    /// <summary>
    /// ThesubnetworkContainer is a object to represent the communication of the Provisioned Network to the Network
    /// </summary>
    [Serializable]
    public class SubNetworkContainer
    {
        public bool vdi_visible;

        public SubNetworkContainer(bool _vdi)
        {
            vdi_visible = _vdi;
        }
    }


    /// <summary>
    /// A collection of a network's data, including network id and nodes within it.
    /// </summary>
    [Serializable]
    public class ProNetwork
    {
        /// <summary>
        /// name of this simulated network
        /// </summary>
        public string name;
        /// <summary>
        /// IP address of the Network 
        /// </summary>
        public string cidr;
        /// <summary>
        /// Represents communication between the Laforgenetwork and the actual network. Used to determine if this network has a direct connection to this network.
        /// </summary>
        public SubNetworkContainer ProvisionedNetworkToNetwork;
        /// <summary>
        /// List of the system hosts (nodes) within this network
        /// </summary>
        public List<ProHost> ProvisionedNetworkToProvisionedHost;


        /// <summary>
        /// Constructor for Network data holder
        /// </summary>
        /// <param name="_name">Name of the Network</param>
        /// <param name="_ip">the IP address of this network</param>
        /// <param name="_subNet">Determines if the network is connected to the starting network</param>
        /// <param name="_nodes">List of all systems (nodes) within this network</param>
        public ProNetwork(string _name, string _ip, SubNetworkContainer _subNet, List<ProHost> _nodes)
        {
            name = _name;
            cidr = _ip;
            ProvisionedNetworkToNetwork = _subNet;
            ProvisionedNetworkToProvisionedHost = _nodes;
        }
    }

    /// <summary>
    /// A collection of all network and node data compiled into one data structure.
    /// </summary>
    [Serializable]
    public class Infrastructure
    {
        /// <summary>
        /// This is the team the Infrastructure is built for in the System
        /// </summary>
        public int team_number;
        /// <summary>
        /// list of all networks within the simulated system
        /// </summary>
        public List<ProNetwork> TeamToProvisionedNetwork;
        /// <summary>
        /// list of all nodes within the simulated system
        /// </summary>
        public List<ProHost> nodes;

        /// <summary>
        /// Constructor for Infrastructure Data Holder
        /// </summary>
        /// <param name="_networks">List of Networks within this Competition </param>
        /// <param name="_teamID">This is the team number this network is attatched to in the Compettion structure</param>
        public Infrastructure (int _teamID,List<ProNetwork> _networks)
        {
            team_number = _teamID;
            TeamToProvisionedNetwork = _networks;
            foreach(ProNetwork net in _networks)
            {
                foreach(ProHost node in net.ProvisionedNetworkToProvisionedHost)
                {
                    nodes.Add(node);
                }
            }
        }

    }

    // These are the exterior parts of the JSON file which we will need to read through in order to access the info we want.
    // To reach the infrastructure we want, we will need to grab LaforgeShell.data.environment.EnvironmentToBuild[0].buildToTeam[0]
    #region CPTC Shell Classes

    public class LaforgeShell
    {
        public DataShell data;

        public LaforgeShell(DataShell _shell)
        {
            data = _shell;
        }

        public string ConvertToJSON()
        {
            string dataString = "";
            dataString += JsonUtility.ToJson(this);
            return dataString;
        }
    }
    public class DataShell
    {
        public EnvironmentShell environment;

        public DataShell(EnvironmentShell _shell)
        {
            environment = _shell;
        }
    }
    public class EnvironmentShell
    {
        public List<BuildShell> EnvironmentToBuild;

        public EnvironmentShell(List<BuildShell> _shell)
        {
            EnvironmentToBuild = _shell;
        }
    }
    public class BuildShell
    {
        public List<Infrastructure> buildToTeam;

        public BuildShell(List<Infrastructure> _infras)
        {
            buildToTeam = _infras;
        }
    }
    #endregion CPTP Shell Classes
}
