using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TeamData: MonoBehaviour
{
    #region Fields

    private int teamId;

    [SerializeField]
    private List<AlertData> alerts;

    [SerializeField]
    private List<int> discoveredNodeIds;

    private InfrastructureData infraCopy;
    
    #endregion Fields
    
    #region Properties

    /// <summary>
    /// Gets or sets what this team's id is.
    /// </summary>
    public int TeamId
    {
        get
        {
            return teamId;
        }
        set
        {
            if (value >= 0)
            {
                teamId = value;
            }
        }
    }

    /// <summary>
    /// Gets a list of alerts generated by this team.
    /// </summary>
    public List<AlertData> Alerts
    {
        get
        {
            return alerts;
        }
    }

    /// <summary>
    /// Gets a list of nodes this team has discovered.
    /// </summary>
    public List<int> DiscoveredNodeIds
    {
        get
        {
            return discoveredNodeIds;
        }
    }

    /// <summary>
    /// Gets or sets this team's copy of the infrastructure data.
    /// </summary>
    public InfrastructureData InfraCopy
    {
        get
        {
            return infraCopy;
        }
        set
        {
            infraCopy = value;
        }
    }
    
    #endregion Properties
    
    // Start is called before the first frame update
    void Start()
    {

    }

    // Update is called once per frame
    void Update()
    {
        
    }

    /// <summary>
    /// Reads the first alert in the alerts list and changes the infrastructure based-on that.
    /// </summary>
    public void ReadNextAlert()
    {
        AlertData newAlert = alerts[0];
        alerts.RemoveAt(0);

        switch (newAlert.Type)
        {
            case CPTCEvents.Discovery:
                break;
            case CPTCEvents.Exploit:
                break;
            case CPTCEvents.ShutDown:
                break;
            case CPTCEvents.StartUp:
                break;
        }
    }
}
